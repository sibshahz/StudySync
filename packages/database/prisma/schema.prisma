generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

//
// ENUMS
//

enum Role {
  ADMIN
  TEACHER
  STAFF
  STUDENT
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
  DELETED
  GRADUATED
}

enum SemesterSeason {
  SPRING
  FALL
}

enum QuestionType {
  MCQ
  SHORT
  LONG
}

//
// CORE MODELS
//

model OrganizationMembership {
  id             Int          @id @default(autoincrement())
  userId         Int
  organizationId Int
  role           Role
  createdAt      DateTime     @default(now())

  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([userId, organizationId])
}

model Organization {
  id           Int                     @id @default(autoincrement())
  name         String                  @unique
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt

  departments  Departments[]
  joinCodes    JoinCode[]
  memberships  OrganizationMembership[]
}

model JoinCode {
  id             Int       @id @default(autoincrement())
  code           String    @unique
  organizationId Int
  role           Role
  usageLimit     Int?
  usedCount      Int       @default(0)
  expiresAt      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id])
}

model User {
  id             Int                     @id @default(autoincrement())
  email          String                  @unique
  password       String
  name           String?
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  refreshTokens  RefreshToken[]
  status         UserStatus              @default(PENDING)
  roles          Role[]                  @default([USER])


  memberships    OrganizationMembership[]
  student        Student?
  teacher        Teacher?
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Departments {
  id             Int        @id @default(autoincrement())
  name           String
  organizationId Int
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id])
  students       Student[]
  batches        Batch[]
  teachers       Teacher[]
  FYPGroups      FYPGroup[]
}

model Teacher {
  id           Int       @id @default(autoincrement())
  userId       Int       @unique
  departmentId Int
  designation  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user         User       @relation(fields: [userId], references: [id])
  department   Departments @relation(fields: [departmentId], references: [id])
  assignments  Assignment[]
  quizzes      Quiz[]
}

//
// ACADEMIC STRUCTURE
//

model Batch {
  id             Int            @id @default(autoincrement())
  name           String
  batchYear      Int
  batchCode      String
  departmentId   Int
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  department     Departments     @relation(fields: [departmentId], references: [id])
  students       Student[]
  gradingSchemes GradingScheme[]
  FYPGroups      FYPGroup[]
}

model Semester {
  id             Int             @id @default(autoincrement())
  name           String
  semesterSeason SemesterSeason
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  students       Student[]
  courses        Courses[]
}

model Student {
  id                     Int                   @id @default(autoincrement())
  userId                 Int                   @unique
  name                   String
  email                  String                @unique
  rollNo                 String                @unique
  batchId                Int
  departmentId           Int
  FYPGroupId             Int?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt

  user                   User                  @relation(fields: [userId], references: [id])
  department             Departments           @relation(fields: [departmentId], references: [id])
  batch                  Batch                 @relation(fields: [batchId], references: [id])
  FYPGroup               FYPGroup?             @relation(fields: [FYPGroupId], references: [id])

  semesters              Semester[]
  courses                Courses[]
  quizAttempts           QuizAttempt[]
  assignmentSubmissions  AssignmentSubmission[]
}

model Courses {
  id              Int        @id @default(autoincrement())
  name            String
  code            String     @unique
  courseSemesterId Int
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  courseSemester  Semester   @relation(fields: [courseSemesterId], references: [id])
  students        Student[]
  assignments     Assignment[]
  quizzes         Quiz[]
}

//
// FYP SYSTEM (Updated)
//

model FYPProjects {
  id          Int                    @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  assignments FYPProjectAssignment[]
}

model FYPGroup {
  id           Int                    @id @default(autoincrement())
  name         String
  maxMembers   Int
  batchId      Int
  departmentId Int
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt

  batch        Batch                  @relation(fields: [batchId], references: [id])
  department   Departments            @relation(fields: [departmentId], references: [id])
  students     Student[]

  assignments  FYPProjectAssignment[]
}

model FYPProjectAssignment {
  id          Int         @id @default(autoincrement())
  projectId   Int
  groupId     Int
  assignedAt  DateTime    @default(now())

  project     FYPProjects @relation(fields: [projectId], references: [id])
  group       FYPGroup    @relation(fields: [groupId], references: [id])

  @@unique([projectId, groupId])
}

//
// ASSIGNMENTS & QUIZZES
//

model Assignment {
  id         Int       @id @default(autoincrement())
  title      String
  details    String?
  courseId   Int
  teacherId  Int
  dueDate    DateTime
  createdAt  DateTime  @default(now())

  course     Courses   @relation(fields: [courseId], references: [id])
  teacher    Teacher   @relation(fields: [teacherId], references: [id])
  submissions AssignmentSubmission[]
}

model AssignmentSubmission {
  id            Int        @id @default(autoincrement())
  assignmentId  Int
  studentId     Int
  submittedAt   DateTime   @default(now())
  fileUrl       String?
  grade         Float?

  assignment    Assignment @relation(fields: [assignmentId], references: [id])
  student       Student    @relation(fields: [studentId], references: [id])
}

model Quiz {
  id         Int       @id @default(autoincrement())
  title      String
  courseId   Int
  teacherId  Int
  createdAt  DateTime  @default(now())

  course     Courses   @relation(fields: [courseId], references: [id])
  teacher    Teacher   @relation(fields: [teacherId], references: [id])
  questions  QuizQuestion[]
  attempts   QuizAttempt[]
}

model QuizQuestion {
  id        Int         @id @default(autoincrement())
  quizId    Int
  question  String
  type      QuestionType
  options   String[]
  answer    String

  quiz      Quiz        @relation(fields: [quizId], references: [id])
}

model QuizAttempt {
  id         Int       @id @default(autoincrement())
  quizId     Int
  studentId  Int
  score      Float
  attemptedAt DateTime @default(now())

  quiz       Quiz      @relation(fields: [quizId], references: [id])
  student    Student   @relation(fields: [studentId], references: [id])
}

//
// GRADING SYSTEM
//

model GradingScheme {
  id         Int           @id @default(autoincrement())
  title      String
  isDefault  Boolean        @default(false)
  batchId    Int?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  batch      Batch?         @relation(fields: [batchId], references: [id])
  items      GradeItem[]
}

model GradeItem {
  id              Int           @id @default(autoincrement())
  schemeId        Int
  minPercentage   Float
  maxPercentage   Float
  grade           String
  gradePoint      Float

  scheme          GradingScheme @relation(fields: [schemeId], references: [id])
}
